// Custom added styles

// Checkerboard for thumbnails with transparent areas
%checkerboard {
  background-position: 0px 0px, 10px 10px;
  background-size: 20px 20px;
  background-image: linear-gradient(
    45deg, $borders_color 25%,
    transparent 25%,
    transparent 75%,
    $borders_color 75%,
    $borders_color 100%
  ),
  linear-gradient(
    45deg, $borders_color 25%,
    $base_color 25%,
    $base_color 75%,
    $borders_color 75%,
    $borders_color 100%
  );
}

// Trying to mimic the headerbar button colors from the libadwaita theme when used in gtk4-widget-factory
%colored_buttons {
  @include button(normal, $tc: $headerbar_fg_color);
  &:backdrop {
    @include button(normal, $tc: $backdrop_headerbar_fg);
  }
  &:hover {
    @include button(hover, $tc: $headerbar_fg_color);
    &:backdrop {
      @include button(hover, $tc: $backdrop_headerbar_fg);
    }
  }

  &:active {
    @include button(active, $tc: $headerbar_fg_color);
    &:backdrop {
      @include button(active, $tc: $backdrop_headerbar_fg);
    }
  }
  &:checked {
    @include button(checked, $tc: $headerbar_fg_color);
    &:backdrop {
      @include button(checked, $tc: $backdrop_headerbar_fg);
    }
  }

  &:disabled {
    @include button(insensitive, $tc: $headerbar_fg_color);
    &:backdrop {
      @include button(insensitive, $tc: $backdrop_headerbar_fg);
    }
  }

  &.default:not(.suggested-action):not(.destructive-action) {
    @include button(normal, $tc: $headerbar_fg_color);
  }

  &.flat:not(:hover):not(:active) { @include button(undecorated); }

  &.suggested-action, &.text-button.suggested-action { @extend %suggested_buttons; }
  &.destructive-action, &.text-button.destructive-action { @extend %destructive_buttons; }
}

%headerbar_buttons {
  // The normal state is set where it's needed. Usually undecorated.
  &:hover {
    @include button(hover, $tc: $headerbar_fg_color, $flat: true);
    &:backdrop {
      @include button(hover, $tc: $backdrop_headerbar_fg, $flat: true);
    }
  }

  &:active {
    @include button(active, $tc: $headerbar_fg_color, $flat: true);
    &:backdrop {
      @include button(active, $tc: $backdrop_headerbar_fg, $flat: true);
    }
  }

  &:checked {
    @include button(checked, $tc: $headerbar_fg_color, $flat: true);
    &:backdrop {
      @include button(checked, $tc: $backdrop_headerbar_fg, $flat: true);
    }
  }

  &:backdrop {
    image {
      color: $headerbar_fg_color;
      opacity: 0.5; // Because some icons aren't symbolic
      transition: $backdrop_transition;
    }
    &:disabled image {
      color: $headerbar_fg_color;
      opacity: 0.25;
    }
  }

  &:disabled {
    @include button(undecorated);
    &:active,
    &:checked { @include button(insensitive-active, $tc: $headerbar_fg_color, $flat: true); }
    &:backdrop {
      &:active,
      &:checked { @include button(insensitive-active, $tc: $backdrop_headerbar_fg, $flat: true); }
    }
  }

  &.default:not(.suggested-action):not(.destructive-action) {
    @include button(normal);
  }

  &.flat:not(:hover):not(:active) { @include button(undecorated); }

  &.suggested-action, &.text-button.suggested-action { @extend %suggested_buttons; }
  &.destructive-action, &.text-button.destructive-action { @extend %destructive_buttons; }
}

%suggested_buttons {
  @include button(normal, $suggested_bg_color, white);
  border-color: $opaque_button_border;
  &:backdrop {
    @include button(normal, gtkalpha($suggested_bg_color, 0.5), gtkalpha(white, 0.5));
  }
  &:hover {
    @include button(hover, $suggested_bg_color, white);
    border-color: $opaque_button_border;
    &:backdrop {
      @include button(hover, gtkalpha($suggested_bg_color, 0.5), gtkalpha(white, 0.5));
    }
  }

  &:active {
    @include button(active, $suggested_bg_color, white);
    border-color: $opaque_button_border;
    &:backdrop {
      @include button(active, gtkalpha($suggested_bg_color, 0.5), gtkalpha(white, 0.5));
    }
  }
  &:checked {
    @include button(checked, $suggested_bg_color, white);
    border-color: $opaque_button_border;
    &:backdrop {
      @include button(checked, gtkalpha($suggested_bg_color, 0.5), gtkalpha(white, 0.5));
    }
  }

  &:disabled {
    @include button(insensitive, $tc: $backdrop_headerbar_fg);
    &:backdrop { @include button(insensitive, $tc: $backdrop_headerbar_fg); }
  }
}

%destructive_buttons {
  @include button(normal, $destructive_bg_color, $destructive_fg_color);
  border-color: $opaque_button_border;
  &:backdrop {
    @include button(normal, gtkalpha($destructive_bg_color, 0.5), gtkalpha($destructive_fg_color, 0.5));
  }
  &:hover {
    @include button(hover, $destructive_bg_color, $destructive_fg_color);
    border-color: $opaque_button_border;
    &:backdrop {
      @include button(hover, gtkalpha($destructive_bg_color, 0.5), gtkalpha($destructive_fg_color, 0.5));
    }
  }

  &:active {
    @include button(active, $destructive_bg_color, $destructive_fg_color);
    border-color: $opaque_button_border;
    &:backdrop {
      @include button(actiive, gtkalpha($destructive_bg_color, 0.5), gtkalpha($destructive_fg_color, 0.5));
    }
  }
  &:checked {
    @include button(checked, $destructive_bg_color, $destructive_fg_color);
    border-color: $opaque_button_border; 
    &:backdrop {
      @include button(checked, gtkalpha($destructive_bg_color, 0.5), gtkalpha($destructive_fg_color, 0.5));
    }
  }
  &:disabled {
    @include button(insensitive, $tc: $backdrop_headerbar_fg);
    &:backdrop { @include button(insensitive, $tc: $backdrop_headerbar_fg); }
  }
}

// headerbar stuff
%headerbar_stuff,
headerbar, .titlebar, .primary-toolbar {
  // Text colors for gtk named color support (except backdrop and disabled)
  &:not(.selection-mode) {
    &,
    entry {
      color: $headerbar_fg_color;
    }

    &:backdrop,
    entry:backdrop {
      color: $backdrop_headerbar_fg;
    }

    entry:disabled {
      color: $disabled_headerbar_fg;
    }

    button {
      &:not(.suggested-action):not(.destructive-action):not(.titlebutton) {
        color: $headerbar_fg_color;
        &:disabled {
          color: $disabled_headerbar_fg;
        }
        &:backdrop {
          color: $backdrop_headerbar_fg;
          transition: $backdrop_transition;
          &:disabled {
            color: $backdrop_disabled_headerbar_fg;
          }
        }
      }
    }

    switch image { color: transparent; }
  }

  button:not(.titlebutton) {
    &, &:backdrop { @include button(undecorated); }
    @extend %headerbar_buttons;
  }

  // Text buttons
  button.text-button {
    &:not(.suggested-action):not(.destructive-action):not(:disabled) { @extend %colored_buttons; }
  }

  // Linked button borders
  .linked.raised button:not(:only-child),
  .linked button:not(:only-child),
  & > .stack-switcher.linked > button:not(:only-child) {
    @extend %linked;
    &:not(:first-child) { border-left-color: $border_color; }
    &:not(:last-child) { border-right-color: $border_color; }
  }

  // Linked color fills
  // In libadwaita the linked buttons appear on hover, so it would be better to have ".linked:hover button" instead, but sadly it is not possible.
  .linked.raised button,
  .linked button:not(:only-child),
  & > .stack-switcher.linked > button { @extend %colored_buttons; }

  // hdy viewswitcher buttons (weather, system monitor, etc.)
  viewswitcher button.radio:checked {
    @extend %headerbar_buttons;
  }

  // Selection mode
  &.selection-mode {
    button {
      &, &.text-button:not(.suggested-action):not(.destructive-action):not(:disabled) {
        @extend %suggested_buttons;
      }
    }
  }

  // Entries
  entry {
    min-height: 32px; // Evens out the height for the top and bottom borders which adds 2px
    @include entry(normal);
    &:backdrop {
      @include entry(backdrop);
    }
    &:focus {
      @include entry(focus);
    }
    &:disabled {
      @include entry(insensitive);
    }
    &:disabled:backdrop {
      @include entry(backdrop-insensitive);
    }

    image { // icons inside the entry
      &.left { margin-right: 6px; }
      &.right { margin-left: 6px; }

      // entry icons colors
      color: gtkmix($fg_color, $base_color, 80%);
      &:hover { color: $headerbar_fg_color; }
      &:active { color: $selected_bg_color; }
      &:backdrop { color: gtkmix($backdrop_fg_color, $backdrop_base_color, 80%); }
    }

    selection { @extend %selected_items; }

    // entry error and warning style
    @each $e_type, $e_color in (error, $error_bg_color),
                               (warning, $warning_bg_color) {
      &.#{$e_type} {
        color: $e_color;
        border-color: entry_focus_border($e_color);

        &:focus { @include entry(focus, $e_color); }

        selection { background-color: $e_color; }
      }
    }

    &.flat {
      &:focus, &:backdrop, &:disabled, &:backdrop:disabled, & {
        min-height: 0;
        padding: 2px;
        background-color: transparent;
        border-color: transparent;
        border-radius: 0;
      }
    }

    &:drop(active) {
      &:focus, & {
        border-color: $drop_target_color;
        box-shadow: inset 0 0 0 1px $drop_target_color;
      }
    }

    progress {
      margin: 2px -6px;
      background-color: transparent;
      background-image: none;
      border-radius: 0;
      border-width: 0 0 2px;
      border-color: $progress_bg_color;
      border-style: solid;
      box-shadow: none;

      &:backdrop { background-color: transparent; }
    }
  }

  .linked entry:not(:first-child) {
    border-left-color: $border_color;
    &:backdrop { border-left-color: $border_color; }
  }
  .linked entry ~ .image-button { @extend %colored_buttons; }

  // switches
  switch {
    &:backdrop {
      color: $backdrop_fg_color;
      border-color: $backdrop_borders_color;
      background-color: $backdrop_dark_fill;
      text-shadow: none;
      transition: $backdrop_transition;

      &:checked {
        @if $variant == 'light' { color: $backdrop_bg_color; }
        background-color: gtkalpha($checkradio_bg_color, 0.5);
        &:disabled {
          background-color: gtkalpha($checkradio_bg_color, 0.3);
        }
      }

      &:disabled {
        @include button(insensitive);
      }

      slider {
        transition: $backdrop_transition;
        background-color: gtkmix($base_color, $slider_color, 30%);
      }

      &:checked > slider { background-color: gtkmix($base_color, $slider_color, 30%); }

      &:disabled slider { background-color: gtkmix($base_color, $slider_color, 60%); }
    }

    &:disabled {
      background-color: gtkshade($backdrop_dark_fill, 0.96);
      &:backdrop { background-color: $backdrop_dark_fill; }
    }
  }

  // better animation when switching from backdrop
  &:not(:backdrop) {
    transition: 50ms ease-in;
    transition-property: background-color, background-image, box-shadow, border-color, color, text-shadow;
  }

  @if $window_controls == 'symbolic' {
    // Balance out the titlebutton margin
    .right {
      margin-left: -4px;
      margin-right: 2px;
      separator { min-width: 0; }
    }
    .left {
      margin-right: -4px;
      margin-left: 2px;
      separator { min-width: 0; }
    }
  }
  @if $window_controls == 'macos' {
    // Adjust the titlebutton margin
    .right {
      margin-right: 8px;
      separator.titlebutton { min-width: 2px; }
    }
    .left {
      margin-left: 8px;
      separator.titlebutton { min-width: 2px; }
    }
  }
}

// Even out toggle button padding to make them more square
button.toggle:not(.image-button) {
  padding-left: 8px;
  padding-right: 8px;
}

// Font fixes when button text is bold
.flat.popup:not(.title) {
  font-weight: normal;
}

// Smaller text in statusbars
statusbar {
  font-size: small;
}

// scrolled window list rows
scrolledwindow list {
  &:not(.content) {
    padding: 5px 0;
  }
  row {
    margin: 1px 6px;
    border-radius: $button_radius;
  }
  separator.horizontal {
    margin: 5px 6px;
  }
}

// Fix wrong border-radius on hdy spinbutton entries
list.content .horizontal spinbutton entry {
  border-top-left-radius: $button_radius;
  border-bottom-left-radius: $button_radius;
}

// Non "content" lists
list.view.frame {
  border-radius: $card_radius;
  &, &:backdrop { background-color: $card_bg_color; }
}


@if $window_controls == 'symbolic' {
  // Legacy application titlebuttons
  .ssd .titlebar {
    border-width: 0;
    padding: if($variant=='light', 0 4px, 0 3px);
    min-height: if($variant=='light', 36px, 35px);
    border-bottom: 1px solid $headerbar_shade_color;
    //&:backdrop { border-color: $backdrop_borders_color; }

    &.default-decoration button.titlebutton {
      min-height: 24px;
      min-width: 24px;
      margin: 0 3px;
      padding: 0;
      border: none;
      box-shadow: none;
      background-color: transparent;
      &:backdrop {
        color: $backdrop_headerbar_fg;
      }
      &.close, &.maximize, &.minimize {
        background-color: $titlebutton_normal;
        box-shadow: inset 0 0 0 1px $button_border;
        &:hover { background-color: $titlebutton_normal_hover; }
        &:hover:active, &:active { background-color: $titlebutton_normal_active; }
        &:backdrop { background: $titlebutton_backdrop; }
        &:backdrop:hover { background: $titlebutton_backdrop_hover; }
      }
    }
  }
}

@if $window_controls == 'macos' {
  // macOS Legacy application titlebuttons. Most of this (including the images that are used here) is borrowed from https://github.com/vinceliuice/WhiteSur-gtk-theme
  .ssd .titlebar {
    border-width: 0;
    padding: if($variant=='light', 0 9px, 0 8px);
    min-height: if($variant=='light', 36px, 35px);
    border-bottom: 1px solid $headerbar_shade_color;

    &.default-decoration {
      button.titlebutton {
        &:not(.close):not(.maximize):not(.minimize) {
          min-height: 24px;
          min-width: 24px;
          margin: 0 -3px;
          padding: 0;
          border: none;
          box-shadow: none;
          background-color: transparent;
          &:backdrop {
            color: $backdrop_headerbar_fg;
          }
        }

        &.close, &.maximize, &.minimize {
          background-position: center;
          background-repeat: no-repeat;
          background-size: 16px;
          background-color: transparent;
          border-width: 0px;
          outline-width: 0px;
          color: transparent;
          min-height: 16px;
          min-width: 16px;
          margin: 0 1px;
          padding: 0;
        }

        @each $k in ('close', 'maximize', 'minimize') {
          @each $l, $m in ('',''), (':backdrop','-backdrop'), (':backdrop:hover','-backdrop-hover'), (':hover','-hover'), (':active','-active') {
            &.#{$k}#{$l} {
              background-image: -gtk-scaled(url('assets/titlebutton-#{$k}#{$m}#{$asset_suffix}.png'),
                                            url('assets/titlebutton-#{$k}#{$m}#{$asset_suffix}@2.png'));
            }
          }
        }
      }
      .fullscreen &,
      .maximized & {
        button.titlebutton {
          @each $l, $m in ('',''), (':backdrop','-backdrop'), (':backdrop:hover','-backdrop-hover'), (':hover','-hover'), (':active','-active') {
            &.maximize#{$l} {
              background-image: -gtk-scaled(url('assets/titlebutton-restore#{$m}#{$asset_suffix}.png'),
                                            url('assets/titlebutton-restore#{$m}#{$asset_suffix}@2.png'));
            }
          }
        }
      }
    }
  }
}

.default-decoration .title {
  color: $headerbar_fg_color;
  &:backdrop { color: $backdrop_headerbar_fg; }
}

// Tree views
treeview.view {
  &:not(:selected):not(:hover) {
    background-color: transparent;
  }
  &:not(:selected):hover {
    background-color: $view_hover_color;
  }
  &:selected:not(:hover) {
    background-color: $view_selected_color;
    color: $text_color;
  }
  &:selected:hover {
    background-color: $view_selected_hover_color;
    color: $text_color;
  }
}

// Preferences window
// In nautilus preferences there is no padding below the last list
.preferences scrolledwindow > .frame > clamp {
  &.large, &.medium, &.small { padding-bottom: 30px; }
}

// Toolbars
.primary-toolbar {
  &:dir(ltr), &:dir(rtl) {
    background-color: $headerbar_bg_color;
    &:backdrop {
      background-color: $headerbar_backdrop_color;
      transition: $backdrop_transition;
    }
  }
}
.primary-toolbar.horizontal {
  &:dir(ltr), &:dir(rtl) {
    border-bottom: 1px solid $headerbar_shade_color;
  }
}

// Popover menuitems
popover.background {
  modelbutton.flat {
    padding-left: 16px;
    padding-right: 16px;
  }

  modelbutton.flat,
  .menuitem.button.flat {
    color: $popover_fg_color;
    &:disabled label {
      color: gtkmix($popover_fg_color, $popover_bg_color, 50%);
    }
    &:backdrop {
      color: $backdrop_fg_color;
    }
    &:backdrop:hover {
      background-color: $hover_color;
    }
  }
  radio {
    padding: 1px;
  }
  check {
    padding: 2px;
  }
}

// Mimic libadwaita popover padding
popover.menu > stack {
  margin: -6px;
}

// Trying to mimic new libadwaita tabs
notebook {
  > header {
    padding: 0 if($variant=='light', 3px, 2px);

    button {
      &:dir(rtl), &:dir(ltr) { // specificity bump
        color: $headerbar_fg_color;
        margin: 0 3px;
        &:backdrop { color: $backdrop_headerbar_fg; }
        &:disabled { color: $disabled_headerbar_fg; }
      }
    }

    tab {
      &.reorderable-page {
        min-height: 26px;
        padding: 4px 12px;
        border-radius: $button_radius;
        background-color: transparent;
        margin: 5px 2px 6px 3px;
        border: none;
        box-shadow: none;
        color: $headerbar_fg_color;
        &:backdrop {
          color: $backdrop_headerbar_fg;
        }
        > box { // hack to mimic libadwaita seperators
          border-left: 1px solid $tab_border;
          margin-left: -15px;
          padding-left: 15px;
          transition: border-color 150ms ease-in-out;
        }
        &, &:backdrop {
          button.flat { opacity: 0; }
        }
      }

      &:hover.reorderable-page {
        background-color: $tab_color_hover;
        color: $headerbar_fg_color;
        box-shadow: inset 0 0 0 1px $button_border;
        & box, + tab box { border-color: transparent; }
        &:backdrop {
          color: $backdrop_headerbar_fg;
          button.flat { color: $backdrop_headerbar_fg; }
        }
        button.flat { opacity: 1; }
      }

      &:checked.reorderable-page {
        background-color: $tab_color_active;
        color: $headerbar_fg_color;
        box-shadow: inset 0 0 0 1px $button_border;
        & box, + tab box { border-color: transparent; }
        &:backdrop {
          color: $backdrop_headerbar_fg;
          button.flat { color: $backdrop_headerbar_fg; }
        }
        &:hover { background-color: $tab_color_active_hover; }
        button.flat { opacity: 1; }
      }

      &.reorderable-page button.flat {
        color: $headerbar_fg_color;
        margin: 1px 0;
        min-width: 22px;
        min-height: 22px;
        border-radius: 100%;
        &:backdrop { color: $backdrop_headerbar_fg; }
        &:last-child {
          margin-left: 0;
          margin-right: -8px;
        }

        &:first-child {
          margin-left: -8px;
          margin-right: 0;
        }
      }
    }

    arrow.down + tab,
    tab:first-child {
      &.reorderable-page {
        margin-left: 2px;
        > box {
          border-color: transparent;
        }
      }
    }
  }
}

notebook.frame,
.frame > notebook {
  &:dir(rtl), &:dir(ltr) { // specificity bump
    button {
      color: $fg_color;
      &:backdrop { color: $backdrop_fg_color; }
      &:disabled { color: $insensitive_fg_color; }
    }
    tab.reorderable-page {
      &:hover, &:checked, & {
        color: $fg_color;
      }
    }
    button.flat {
      color: $fg_color;
    }
  }
}